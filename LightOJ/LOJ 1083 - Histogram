#include<bits/stdc++.h>
using namespace std;
#define MX 100001
const int inf = 1e9;
int arr[MX],n;
int tree[MX*4];
void build(int node,int b,int e)//build array in 0(nlogn)...
{
    if(b == e)
    {
       tree[node] = b;
       return;
    }
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    if(arr[tree[left]] <= arr[tree[right]]){
        tree[node] = tree[left];
    }
    else tree[node] = tree[right];
}

int minInQuery(int node,int b,int e,int i,int j)//query take 0(nlogn)....
{
    if(i>e || j<b) return -1;
    if(b >= i && e <= j) return tree[node];
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e)/2;
    int p1 = minInQuery(left,b,mid,i,j);
    int p2 = minInQuery(right,mid+1,e,i,j);
    if(p1 == -1) return p2;///As i stored array from index 1 so when a segment outside
                           /// from my needed segment that time return -1 so when p1 = -1
                           ///that time return p2
    if(p2 == -1) return p1;
    if(arr[p1] <= arr[p2]) return p1;
    else return p2;
}

int Area(int b,int e)
{
    if(b > e) return 0;
    if(b == e) return arr[b];
    int minIndex = minInQuery(1,1,n,b,e);
    int ans = max(Area(b,minIndex-1),Area(minIndex+1,e));
    return max(ans,(e-b+1)*arr[minIndex]);
}
int main()
{
    int t;
    scanf("%d",&t);
    for(int cs = 1; cs <= t; cs++){
        scanf("%d",&n);
        for(int i = 1; i <= n; i++){
            scanf("%d",&arr[i]);
        }
        build(1,1,n);
        printf("Case %d: %d\n",cs,Area(1,n));
    }
    return 0;
}

