#include<bits/stdc++.h>
using namespace std;
const int MAX = 1e4+5;
int par[MAX];
int total_city = 0;
map<string,int>mp;
set<string>st;
struct edge{
   int u,v,w;
   bool operator < (const edge & p)const
   {
       return w < p.w;
   }
};
vector<edge>e;
vector<edge >mst_tree;
int findset(int r)
{
    if(par[r] == r)return r;
    return par[r] = findset(par[r]);
}
int kruskal(int n)
{
    sort(e.begin(),e.end());
    for(int i=0; i<=n; i++)par[i] = i;

    int cnt = 0,cost = 0;
    for(int i = 0; i < (int)e.size(); i++){
        int u = findset(e[i].u);
        int v = findset(e[i].v);
        if(u != v){
        mst_tree.push_back(e[i]);
        par[u] = v;
        cnt++;
        cost += e[i].w;
        }
        if(cnt == total_city - 1){
                return cost;
        }
    }
    return -1;
}
int main()
{
    int t;
    cin >> t;
    for(int cs = 1; cs <= t; cs++){
    st.clear();
    e.clear();
    mp.clear();
    int n,m,tmp = 1;
    cin>>n;
    for(int i=1; i <= n; i++){
        string u,v;
        int w;
        cin>> u >> v >> w;
        st.insert(u);
        st.insert(v);
        if(mp.find(u) == mp.end()){
            mp[u] = tmp;
            tmp++;
        }
        if(mp.find(v) == mp.end()){
            mp[v] = tmp;
            tmp++;
        }
        edge get;
        get.u = mp[u];
        get.v = mp[v];
        get.w = w;
        e.push_back(get);
    }
    total_city = st.size();
    int ans = kruskal(n);
//    for(int i=0; i<mst_tree.size(); i++){
//        cout<<"("<<mst_tree[i].u<<" , "<<mst_tree[i].v<<") : "<<mst_tree[i].w<<endl;
//    }
    if(ans == -1)
    {
        printf("Case %d: Impossible\n",cs);
    }
    else{
        printf("Case %d: %d\n",cs,ans);
    }
}
 return 0;
}
