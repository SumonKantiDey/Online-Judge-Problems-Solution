#include<bits/stdc++.h>
using namespace std;
#define mx 100009
int ara[mx];
int tree[mx*3];
int pp;
void build(int node,int b,int e)//build array in 0(nlogn)...
{
    if(b == e)
    {
    tree[node] = ara[b];
    return;
    }
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e)/2;
    build(left,b,mid);
    build(right,mid+1,e);
    tree[node] = tree[left]+tree[right];
}
int query(int node,int b,int e,int i,int j)//query take 0(nlogn)....
{
    if(i>e || j<b) return 0;
    if(b >= i && e <= j) return tree[node];
    int left = node*2;
    int right = node*2 + 1;
    int mid = (b+e)/2;
    int p1 = query(left,b,mid,i,j);
    int p2 = query(right,mid+1,e,i,j);
    return p1+p2;

}
void update(int node,int b,int e,int i,int newvalue)//query take 0(nlogn)....
{
    if(i > e || i < b) return ;
    if(pp==1){
    if(b >= i && e <= i ){
        printf("%d\n",tree[node]);
        tree[node] = 0;
        return;
    }
    }
    if(pp==2){
   if(b >= i && e <= i ){
        tree[node] = newvalue+tree[node];
        return;
    }
    }
    int left = node*2;
    int right = node*2 + 1;
    int mid =(b+e)/2;
    update(left,b,mid,i,newvalue);
    update(right,mid+1,e,i,newvalue);
    tree[node]=tree[left]+tree[right];
}
int main()
{

    //freopen("in.txt","r",stdin);
    int tt,l=0;
    scanf("%d",&tt);
    while(tt--){
    int n,n1,m,type,t1,t2,t3,t4,t5,temp;
    scanf("%d%d",&n,&m);
    ara[0]=0;
    for(int i=1; i<=n; i++)scanf("%d",&ara[i]);
    build(1,1,n);
    printf("Case %d:\n",++l);
    for(int i=0; i<m; i++){
    scanf("%d",&type);
    pp = type;
    if(type == 1)
    {
    scanf("%d",&t1);
    int p=t1+1;
    update(1,1,n,p,0);
    }
    if(type == 2)
    {
    scanf("%d%d",&t2,&t3);
    update(1,1,n,t2+1,t3);//3th index change by value -2
    }
    if(type == 3)
    {
    scanf("%d%d",&t4,&t5);
    printf("%d\n",query(1,1,n,t4+1,t5+1));
    }
    }
    }

    return 0;
}
