#include<bits/stdc++.h>
using namespace std;
#define MAX 100005
#define hell 1e7
char ara[MAX];
int tree[MAX*4]={0};
void update_tree(int node,int a,int b,int i,int j)
{
  if(a>b || a>j || b<i)//Curent segment is not within range[i j]
  return;
  if(a >= i && b<=j)//segment is fully within range[i j]
  {
     tree[node]++;
     return ;
  }
  update_tree(node*2,a,(a+b)/2,i,j);
  update_tree(node*2 + 1,(a+b)/2 + 1,b,i,j);
}
void query_tree(int node,int a,int b,int pos)
{

  if(tree[node] != 0)
  {
      if(a != b)//when a and b not leaf node
      {
      tree[node*2] +=tree[node];//Define child as lazy
      tree[node*2 + 1] +=tree[node];//Define child as lazy
       tree[node] = 0;//reset here
      }

  }
   if(a>pos || b<pos)
    return ;
  if(a == b){
      if(tree[node] %2 ==1)//when a and b not leaf node
      {
          if(ara[a] == '1')ara[a]='0';
          else ara[a] ='1';
      }
      tree[node] = 0;//reset here
      return ;
      }
  query_tree(node*2,a,(a+b)/2,pos);//query left child
  query_tree(node*2 + 1,(a+b)/2 + 1,b,pos);//query right child

}
int main()
{
 // cout<<hell<<endl;
  int n,tt,qq,us,ue,Q,cs=0;
  char ch;
  cin>>tt;
  while(tt--){
  scanf("%s",&ara);
  int n = strlen(ara);
 for(int i=0; i<n*4; i++)tree[i]=0;
  //cout<<n<<endl;
  cin>>qq;
  printf("Case %d:\n",++cs);
  while(qq--){
 // cin>>ch;
  scanf(" %c",&ch);
  if(ch == 'I'){
      scanf("%d%d",&us,&ue);
      update_tree(1,0,n-1,us-1,ue-1);
//        for(int i=0; i<20; i++){
//            cout<<tree[i]<<" ";
//        }
//        cout<<endl;
  }
  else if(ch == 'Q'){
      scanf("%d",&Q);
     query_tree(1,0,n-1,Q-1);
//         for(int i=0; i<20; i++){
//            cout<<tree[i]<<" ";
//        }
//        cout<<endl;

     printf("%c\n",ara[Q-1]);
  }
  }
  }

  return 0;
}



