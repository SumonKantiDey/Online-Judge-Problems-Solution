#include<bits/stdc++.h>
using namespace std;
const int MAX = 1e4+5;
int par[MAX];

struct edge{
   int u,v,w;
   bool operator < (const edge & p)const
   {
       return w < p.w;
   }
};
vector<edge>e;
vector<edge >mst_tree;
int findset(int r)
{
    if(par[r] == r)return r;
    return par[r] = findset(par[r]);
}
int kruskal(int n)
{
    for(int i=0; i<=n; i++)par[i] = i;
    int cnt = 0,cost = 0;
    for(int i=0; i<(int)e.size(); i++){
        int u = findset(e[i].u);
        int v = findset(e[i].v);
        if(u != v){
        mst_tree.push_back(e[i]);
        par[u] = v;
        cnt++;
        cost += e[i].w;
        if(cnt == n-1)break;
        }
    }
    return cost;
}
int main()
{
    int n,t,cst1,cst2,total_cst;
    cin >> t;
    for(int cs = 1; cs <= t; cs++){
    int u,v,w;
    cin>>n;
    while(cin>>u>>v>>w && (u + v + w)){
        edge get;
        get.u = u;
        get.v = v;
        get.w = w;
        e.push_back(get);
    }
    sort(e.begin(),e.end());
    cst1 = kruskal(n + 1);
    /**
    cout<<"minimum cost : "<<kruskal(n + 1)<<endl;
    for(int i=0; i<mst_tree.size(); i++){
        cout<<"("<<mst_tree[i].u<<" , "<<mst_tree[i].v<<") : "<<mst_tree[i].w<<endl;
    }
    **/
    mst_tree.clear();
    reverse(e.begin(),e.end());
    cst2 = kruskal(n + 1);
    /**
     cout<<"maximum cost : "<<kruskal(n + 1)<<endl;
    for(int i=0; i<mst_tree.size(); i++){
        cout<<"("<<mst_tree[i].u<<" , "<<mst_tree[i].v<<") : "<<mst_tree[i].w<<endl;
    }
    **/
   total_cst = cst1 + cst2;
   if(total_cst % 2 == 0)
   {
      printf("Case %d: %d\n",cs,total_cst/2);
   }
   else{
     printf("Case %d: %d/2\n",cs,total_cst);
   }
    mst_tree.clear();
    e.clear();
    }
 return 0;
}
